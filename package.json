{
	"enabledApiProposals": [
		"resolvers",
		"contribViewsRemote",
		"contribRemoteHelp"
	],
	"extensionKind": [
		"ui"
	],
	"name": "open-remote-distrobox",
	"displayName": "Open Remote - Distrobox",
	"description": "manages vscodium remote extension host for distrobox",
	"version": "0.2.3",
	"publisher": "nerditation",
	"private": true,
	"preview": true,
	"license": "MPL-2.0",
	"repository": "https://github.com/nerditation/open-remote-distrobox",
	"engines": {
		"vscode": "^1.74.0"
	},
	"categories": [
		"Other"
	],
	"activationEvents": [
		"onView:distrobox.guests",
		"onView:distrobox.create",
		"onResolveRemoteAuthority:distrobox"
	],
	"capabilities": {
		"untrustedWorkspaces": {
			"supported": true
		}
	},
	"main": "./out/extension.js",
	"contributes": {
		"commands": [
			{
				"command": "open-remote-distrobox.connect",
				"title": "Connect Current Window to Distrobox Guest",
				"category": "Distrobox",
				"icon": "$(vm-connect)"
			},
			{
				"command": "open-remote-distrobox.connect-new-window",
				"title": "Open a New Window and Connect to Distrobox Guest",
				"category": "Distrobox",
				"icon": "$(empty-window)"
			},
			{
				"command": "open-remote-distrobox.reopen-workspace-in-guest",
				"title": "Reopen Current Workspace in Guest Distro",
				"category": "Distrobox",
				"icon": "$(folder-opened)"
			},
			{
				"command": "open-remote-distrobox.refresh",
				"title": "Refresh the Distrobox Guest List in Remote Explorer",
				"category": "Distrobox",
				"icon": "$(refresh)"
			},
			{
				"command": "open-remote-distrobox.settings",
				"title": "Open the Settings for Distrobox",
				"category": "Distrobox",
				"icon": "$(gear)"
			},
			{
				"command": "open-remote-distrobox.create",
				"title": "Create a New Distrobox Guest Container",
				"category": "Distrobox",
				"icon": "$(plus)"
			},
			{
				"command": "open-remote-distrobox.delete",
				"title": "Delete a Distrobox Guest Container",
				"category": "Distrobox",
				"icon": "$(trash)"
			},
			{
				"command": "open-remote-distrobox.delete-control-script",
				"title": "Delete the Existing (Outdated) Control Script for a Guest",
				"category": "Distrobox",
				"icon": "$(sync)"
			}
		],
		"views": {
			"remote": [
				{
					"name": "Distrobox Guests",
					"id": "distrobox.guests",
					"remoteName": "distrobox",
					"group": "targets@1"
				},
				{
					"name": "Remote Server Information",
					"id": "distrobox.server-info",
					"remoteName": "distrobox",
					"group": "details@1",
					"when": "remoteName == distrobox"
				},
				{
					"type": "webview",
					"name": "Create New Distrobox",
					"id": "distrobox.create",
					"remoteName": "distrobox",
					"group": "targets@2",
					"when": "distrobox.showCreateView"
				}
			]
		},
		"remoteHelp": {
			"getStarted": "https://github.com/nerditation/open-remote-distrobox",
			"reportIssue": "https://github.com/nerditation/open-remote-distrobox/issues/new"
		},
		"resourceLabelFormatters": [
			{
				"scheme": "vscode-remote",
				"authority": "distrobox+*",
				"formatting": {
					"label": "${path}",
					"separator": "/",
					"tildify": true,
					"workspaceSuffix": "distrobox"
				}
			}
		],
		"menus": {
			"view/title": [
				{
					"command": "open-remote-distrobox.refresh",
					"when": "view == distrobox.guests",
					"group": "navigation"
				},
				{
					"command": "open-remote-distrobox.settings",
					"when": "view == distrobox.guests",
					"group": "navigation"
				},
				{
					"command": "open-remote-distrobox.create",
					"when": "view == distrobox.guests",
					"group": "navigation"
				},
				{
					"command": "open-remote-distrobox.delete",
					"when": "view == distrobox.guests",
					"group": "navigation"
				}
			],
			"view/item/context": [
				{
					"command": "open-remote-distrobox.connect",
					"when": "viewItem == distrobox.guest",
					"group": "inline"
				},
				{
					"command": "open-remote-distrobox.connect-new-window",
					"when": "viewItem == distrobox.guest",
					"group": "inline"
				},
				{
					"command": "open-remote-distrobox.reopen-workspace-in-guest",
					"when": "viewItem == distrobox.guest",
					"group": "inline"
				}
			],
			"statusBar/remoteIndicator": [
				{
					"command": "open-remote-distrobox.connect",
					"when": "isLinux",
					"group": "remote_20_distrobox_statusbar"
				},
				{
					"command": "open-remote-distrobox.connect-new-window",
					"when": "isLinux",
					"group": "remote_20_distrobox_statusbar"
				},
				{
					"command": "open-remote-distrobox.reopen-workspace-in-guest",
					"when": "isLinux && workspaceFolderCount > 0",
					"group": "remote_20_distrobox_statusbar"
				}
			]
		},
		"configuration": {
			"title": "Open Remote - Distrobox",
			"properties": {
				"distroboxRemoteServer.launch.environment": {
					"scope": "application",
					"markdownDescription": "set environment variables for the remote server.\n\n because the server might be launched through `flatpak-spawn` etc, local environment variables are not guaranteed to be passed to the remote server.\n\n the values can be a string or `true`. if the value is `true`, it will be queried from `process.env`.\n\n please note, the schema is set to type `boolean` so the settings UI will display a grid, but only `true` should be used, variables with value `false` will be ignored.\n\n also note, these variables are set for the remote server using `export` bash commands, the value will be quoted using double quotes, if there are special characters, escape them carefully",
					"type": "object",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-zA-Z_][a-zA-Z0-9_]*$": {
							"description": "the key should be a valid bash variable name, and the value can be a string or `true`. when it's `true`, it is queried from `process.env`",
							"type": [
								"boolean",
								"string"
							],
							"examples": [
								true,
								""
							]
						}
					}
				},
				"distroboxRemoteServer.download.urlTemplate": {
					"scope": "application",
					"markdownDescription": "the template of the url to download the remote server, default is vscodium's github releases.\n\n**IMPORTANT**: if the 'product.json' file contains a `serverDownloadUrlTemplate` (e.g. like [this](https://github.com/VSCodium/vscodium/blob/5ca1fc84d377a155d9369b715c04f23e8dbac090/patches/insider/add-remote-url.patch)), this configuration will be ignored.\n\nvalid variables are:\n- version: in Major.Minor.Patch format, example: 1.98.0\n- release: vscodium specific release number, example: 25067\n- os: the os name of vscodium builds, example: linux, alpine\n- arch: the arch name of vscodium builds, example: x64, arm64\n- commit: the git commit hash, example: a73b8210995797cf220f3b0c23690c5747b42447\n- quality: either 'stable' or 'insider'\n",
					"examples": "https://github.com/VSCodium/vscodium/releases/download/${version}.${release}/vscodium-reh-${os}-${arch}-${version}.${release}.tar.gz",
					"type": "string",
					"default": null
				},
				"distroboxRemoteServer.install.pathTemplate": {
					"scope": "application",
					"markdownDescription": "the template of the path where the vscodium remote server will be installed, default is `${serverDataFolderName}/bin/vscodium-reh-${os}-${arch}-${version}.${release}`\n\nall variables in `distroboxRemoteServer.download.urlTemplate` are available too, and an additonal variable is also available:\n- serverDataFolderName: where the remote server stores its data, example: `.vscodium-server`, `.vscodium-server-insiders`\n\n**NOTE**: if this path doesn't start with `/`, the home directory $HOME is prepended to it.\n\n**NOTE**: the path to the server command is encoded into the bash script, changes to this setting will not take effect immediately for guests whose control script had already been generated.",
					"type": "string",
					"default": null,
					"examples": "${serverDataFolderName}/bin/vscodium-reh-${os}-${arch}-${version}.${release}"
				}
			}
		}
	},
	"packageManager": "pnpm@9.6.0",
	"scripts": {
		"vscode:prepublish": "pnpm clean && pnpm run compile:tsup --minify",
		"compile": "tsc -p ./",
		"lint": "eslint \"src/**/*.ts\"",
		"watch": "tsc -watch -p ./",
		"download-api": "dts dev",
		"postdownload-api": "dts main",
		"postinstall": "pnpm run download-api",
		"compile:tsup": "tsup",
		"watch:tsup": "tsup --watch --dts",
		"package": "vsce pack --no-dependencies",
		"publish": "ovsx publish *.vsix",
		"clean": "rm -rf out"
	},
	"devDependencies": {
		"@types/node": "^20.17.19",
		"@types/which": "^3.0.4",
		"@typescript-eslint/eslint-plugin": "^7.18.0",
		"@typescript-eslint/parser": "^7.18.0",
		"@vscode/dts": "^0.4.1",
		"@vscode/vsce": "^3.2.2",
		"eslint": "^8.57.1",
		"ovsx": "^0.10.1",
		"tsup": "^8.3.6",
		"typescript": "^5.7.3",
		"which": "^5.0.0"
	},
	"pnpm": {
		"overrides": {
			"esbuild": ">=0.25"
		}
	},
	"tsup": {
		"format": "cjs",
		"target": "es2020",
		"outDir": "out",
		"entry": [
			"src/extension.ts"
		],
		"external": [
			"vscode"
		]
	}
}
